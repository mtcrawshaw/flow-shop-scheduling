Road Map:
--> Weekly schedule of tasks
    Weekly goals
    Trello-like board/calendar for tasks/events
    Longer term goal integration
    Analytics
    Automatic scheduling
    Website
    Mobile app
    Watch app

Current sprint (Weekly schedule of tasks):
    Task/Schedule classes
--> Schedule editing with ScheduleSession
    Runner to interact with session via terminal
    Dump schedule to google drive
    Refactoring

Current task (Schedule editing with ScheduleSession):
--> Functions to edit tasks (edit, insert, delete, move)
    Traversing weeks
    Undo/redo
    Scoring

----------------------------------------------------------------------------------------

Before merging to master:
- Lint with ``black flowshop``
- Fix typing issues with ``mypy flowshop``
- Maximize pylint score with ``pylint flowshop``
- Make sure all tests pass with ``pytest flowshop``

Refactoring:
- Set task to have date, start time and end time, instead of start datetime and end
  datetime
- Move tests outside of package

----------------------------------------------------------------------------------------

Features to implement:
- Task
  - Data
    - name: str
    - start_time: datetime.time, end_time: datetime.time
    - priority: int
  - Methods
    - get_points(self)
- Schedule object
  - Data
    - name: str
    - days: List[List[Task]]
    - start_date: datetime.date
  - Methods
    - set_task_name(self, day: int, task_index: int, name: str)
    - set_task_start_time(self, day: int, task_index: int, start_time: datetime.time)
    - set_task_end_time(self, day: int, task_index: int, end_time: datetime.time)
    - set_task_priority(self, day: int, task_index: int, priority: int)
    - add_task(self, task: Task) (can only add tasks to free time)
    - delete_task(self, day: int, task_index: int)
    - move_tasks(self, day: int, start_task_index: int, end_task_index: int)
    - load_from(self, Schedule)
    - total_points(self)
    - daily_points(self, day: int)
- Session
  - Constants:
    - SCHEDULES_DIR
  - Data:
    - name: str
    - edit_history: List[Tuple[Schedule, Schedule]]
    - history_pos: int
  - Methods:
    - edit_task(self, day: int, task_index: int, new_values: Dict[str, Any])
    - insert_task(self, day: int, task_index: int, task: Task)
    - delete_task(self, day: int, task_index: int)
    - move_tasks(self, day: int, start_task_index: int, end_task_index: int, time_delta:
      datetime.time_delta)
    - save(self)
    - load(self, schedule_name: str)
    - new(self, schedule_name: str, base_schedule_name: str = None)
    - undo(self)
    - redo(self)
    - total_score(self)
    - cumulative_score(self, days: int)
    - day_score(self, day: int)
- main (not a class)
  - Data
    - session: Session
    - cursor_day: int
    - cursor_task: int
    - cursor_schedule: bool (indicates whether cursor is on planned or actual)
    - cursor_col: int
  - Methods:
    - main (displays current planned and actual schedule, with point summary and a
      cursor which hovers over a single task. Cursor can be moved with jkl; and
      arrow keys, and cursor can skip days by combining any movement with shift.
      Each of the following options can be chosen with the corresponding key)
      - e: edit current task
      - i: insert task before current task
      - I: insert empty time before current task
      - a: append task after current task
      - A: append empty time after current task
      - d: remove current task
      - D: remove current task and keep space open
      - m: move a contiguous set of tasks in time
      - s: save changes to schedule
      - q: load another schedule
      - n: create a new schedule
      - z: undo last change
      - r: redo last change
    - display(session: Session)
